<?php
if ( !defined( 'myCRED_VERSION' ) ) exit;
/**
 * myCRED_Hooks class
 * @since 0.1
 * @version 1.2
 */
if ( !class_exists( 'myCRED_Hooks' ) ) {
	class myCRED_Hooks extends myCRED_Module {
		/**
		 * Construct
		 */
		function __construct() {
			parent::__construct( 'myCRED_Hooks', array(
				'module_name' => 'hooks',
				'option_id'   => 'mycred_pref_hooks',
				'defaults'    => array(
					'installed'   => array(),
					'active'      => array(),
					'hook_prefs'  => array()
				),
				'labels'      => array(
					'menu'        => __( 'Hooks', 'mycred' ),
					'page_title'  => __( 'Hooks', 'mycred' ),
					'page_header' => __( 'Hooks', 'mycred' )
				),
				'screen_id'   => 'myCRED_page_hooks',
				'accordion'   => true,
				'menu_pos'    => 20
			) );
		}

		/**
		 * Load Hooks
		 * @since 0.1
		 * @version 1.0
		 */
		public function module_init() {
			if ( !empty( $this->installed ) ) {
				foreach ( $this->installed as $key => $gdata ) {
					if ( $this->is_active( $key ) && isset( $gdata['callback'] ) ) {
						$this->call( 'run', $gdata['callback'] );
					}
				}
			}
		}

		/**
		 * Call
		 * Either runs a given class method or function.
		 * @since 0.1
		 * @version 1.1
		 */
		public function call( $call, $callback, $return = NULL ) {
			// Class
			if ( is_array( $callback ) && class_exists( $callback[0] ) ) {
				$class = $callback[0];
				$methods = get_class_methods( $class );
				if ( in_array( $call, $methods ) ) {
					$new = new $class( ( isset( $this->hook_prefs ) ) ? $this->hook_prefs : array() );
					return $new->$call( $return );
				}
			}

			// Function
			if ( !is_array( $callback ) ) {
				if ( function_exists( $callback ) ) {
					if ( $return !== NULL )
						return call_user_func( $callback, $return, $this );
					else
						return call_user_func( $callback, $this );
				}
			}
		}

		/**
		 * Get Hooks
		 * @since 0.1
		 * @version 1.1.1
		 */
		public function get( $save = false ) {
			$installed = array();
			// Registrations
			$installed['registration'] = array(
				'title'        => __( '%plural% for registrations', 'mycred' ),
				'description'  => __( 'Award %_plural% for users joining your website.', 'mycred' ),
				'callback'     => array( 'myCRED_Hook_Registration' )
			);

			// Logins
			$installed['logging_in'] = array(
				'title'       => __( '%plural% for logins', 'mycred' ),
				'description' => __( 'Award %_plural% for logging in to your website. You can also set an optional limit.', 'mycred' ),
				'callback'    => array( 'myCRED_Hook_Logging_In' )
			);

			// Content Publishing
			$installed['publishing_content'] = array(
				'title'       => __( '%plural% for publishing content', 'mycred' ),
				'description' => __( 'Award %_plural% for publishing content on your website. If your custom post type is not shown bellow, make sure it is set to "Public".', 'mycred' ),
				'callback'    => array( 'myCRED_Hook_Publishing_Content' )
			);

			// Commenting
			$installed['comments'] = array(
				'title'       => __( '%plural% for comments', 'mycred' ),
				'description' => __( 'Award %_plural% for making comments.', 'mycred' ),
				'callback'    => array( 'myCRED_Hook_Comments' )
			);

			// Link Clicks
			$installed['link_click'] = array(
				'title'       => __( '%plural% for clicking on links', 'mycred' ),
				'description' => __( 'Award %_plural% to users who clicks on links generated by the [mycred_link] shortcode.', 'mycred' ),
				'callback'    => array( 'myCRED_Hook_Click_Links' )
			);

			// Video Views
			$installed['video_view'] = array(
				'title'       => __( '%plural% for viewing Videos', 'mycred' ),
				'description' => __( 'Award %_plural% to users who watches videos embedded using the [mycred_video] shortcode.', 'mycred' ),
				'callback'    => array( 'myCRED_Hook_Video_Views' )
			);
			$installed = apply_filters( 'mycred_setup_hooks', $installed );

			if ( $save === true && $this->core->can_edit_plugin() ) {
				$new_data = array(
					'active'     => $this->active,
					'installed'  => $installed,
					'hook_prefs' => $this->hook_prefs
				);
				if ( mycred_override_settings() )
					update_site_option( 1, 'mycred_pref_hooks', $new_data );
				else
					update_option( 'mycred_pref_hooks', $new_data );
			}

			$this->installed = $installed;
			return $installed;
		}

		/**
		 * Admin Page
		 * @since 0.1
		 * @version 1.0
		 */
		public function admin_page() {
			// Security
			if ( !$this->core->can_edit_plugin( get_current_user_id() ) ) wp_die( __( 'Access Denied', 'mycred' ) );

			// Get installed
			$installed = $this->get( true ); ?>

	<div class="wrap" id="myCRED-wrap">
		<div id="icon-myCRED" class="icon32"><br /></div>
		<h2><?php echo apply_filters( 'mycred_label', myCRED_NAME ) . ' ' . __( 'Hooks', 'mycred' ); ?></h2>
		<?php if ( isset( $_GET['settings-updated'] ) && $_GET['settings-updated'] == true )
				echo '<div class="updated settings-error"><p>' . __( 'Settings Updated', 'mycred' ) . '</p></div>'; ?>

		<p><?php echo $this->core->template_tags_general( __( 'Hooks are instances where %_plural% are awarded or deducted from a user, depending on their actions around your website.', 'mycred' ) ); ?></p>
		<form method="post" action="options.php">
			<?php settings_fields( 'myCRED-hooks' ); ?>

			<!-- Loop though Hooks -->
			<div class="list-items expandable-li" id="accordion">
<?php		if ( !empty( $installed ) ) {
				foreach ( $installed as $key => $data ) { ?>

				<h4><div class="icon icon-<?php if ( $this->is_active( $key ) ) echo 'active'; else echo 'inactive'; echo ' ' . $key; ?>"></div><label><?php echo $this->core->template_tags_general( $data['title'] ); ?></label></h4>
				<div class="body" style="display:none;">
					<p><?php echo nl2br( $this->core->template_tags_general( $data['description'] ) ); ?></p>
					<label class="subheader"><?php _e( 'Enable', 'mycred' ); ?></label>
					<ol>
						<li>
							<input type="checkbox" name="mycred_pref_hooks[active][]" id="mycred-hook-<?php echo $key; ?>" value="<?php echo $key; ?>"<?php if ( $this->is_active( $key ) ) echo ' checked="checked"'; ?> />
						</li>
					</ol>
					<?php echo $this->call( 'preferences', $data['callback'] ); ?>

				</div>
<?php			}
			} ?>

			</div>
			<?php submit_button( __( 'Update Changes', 'mycred' ), 'primary large', 'submit', false ); ?>

		</form>
	</div>
<?php		unset( $installed );
			unset( $this );
		}

		/**
		 * Sanititze Settings
		 * @since 0.1
		 * @version 1.2
		 */
		public function sanitize_settings( $post ) {
			// Loop though all installed hooks
			$installed = $this->get();

			// Construct new settings
			$new_post['installed'] = $installed;
			if ( empty( $post['active'] ) || !isset( $post['active'] ) ) $post['active'] = array();
			$new_post['active'] = $post['active'];

			if ( !empty( $installed ) ) {
				foreach ( $installed as $key => $data ) {
					if ( isset( $data['callback'] ) && isset( $post['hook_prefs'][ $key ] ) ) {
						// Old settings
						$old_settings = $post['hook_prefs'][ $key ];
						
						// New settings
						$new_settings = $this->call( 'sanitise_preferences', $data['callback'], $old_settings );
						
						// If something went wrong use the old settings
						if ( empty( $new_settings ) || $new_settings === NULL || !is_array( $new_settings ) )
							$new_post['hook_prefs'][ $key ] = $old_settings;
						// Else we got ourselves new settings
						else
							$new_post['hook_prefs'][ $key ] = $new_settings;
						
						// Handle de-activation
						if ( !isset( $this->active ) ) continue;
						if ( in_array( $key, (array) $this->active ) && !in_array( $key, $new_post['active'] ) )
							$this->call( 'deactivate', $data['callback'], $new_post['hook_prefs'][ $key ] );

						// Next item
					}
				}
			}
			
			$installed = NULL;
			return $new_post;
		}
	}
}

/**
 * Hook for registrations
 * @since 0.1
 * @version 1.0
 */
if ( !class_exists( 'myCRED_Hook_Registration' ) ) {
	class myCRED_Hook_Registration extends myCRED_Hook {
		/**
		 * Construct
		 */
		function __construct( $hook_prefs ) {
			parent::__construct( array(
				'id'       => 'registration',
				'defaults' => array(
					'creds'   => 10,
					'log'     => '%plural% for becoming a member'
				)
			), $hook_prefs );
		}

		/**
		 * Run
		 * @since 0.1
		 * @version 1.0
		 */
		public function run() {
			if ( $this->prefs['creds'] != 0 )
				add_action( 'user_register', array( $this, 'registration' ) );
		}

		/**
		 * Registration Hook
		 * @since 0.1
		 * @version 1.0
		 */
		public function registration( $user_id ) {
			// Make sure user is not excluded
			if ( $this->core->exclude_user( $user_id ) === true ) return;

			// Execute
			$this->core->add_creds(
				'registration',
				$user_id,
				$this->prefs['creds'],
				$this->prefs['log'],
				$user_id,
				array( 'ref_type' => 'user' )
			);
		}

		/**
		 * Preference for Registration Hook
		 * @since 0.1
		 * @version 1.0.1
		 */
		public function preferences() {
			$prefs = $this->prefs; ?>

					<label class="subheader"><?php echo $this->core->plural(); ?></label>
					<ol>
						<li>
							<div class="h2"><input type="text" name="<?php echo $this->field_name( 'creds' ); ?>" id="<?php echo $this->field_id( 'creds' ); ?>" value="<?php echo $this->core->number( $prefs['creds'] ); ?>" size="8" /></div>
						</li>
					</ol>
					<label class="subheader"><?php _e( 'Log template', 'mycred' ); ?></label>
					<ol>
						<li>
							<div class="h2"><input type="text" name="<?php echo $this->field_name( 'log' ); ?>" id="<?php echo $this->field_id( 'log' ); ?>" value="<?php echo $prefs['log']; ?>" class="long" /></div>
							<span class="description"><?php _e( 'Available template tags: General, User', 'mycred' ); ?></span>
						</li>
					</ol>
<?php		unset( $this );
		}
	}
}

/**
 * Hook for loggins
 * @since 0.1
 * @version 1.0
 */
if ( !class_exists( 'myCRED_Hook_Logging_In' ) ) {
	class myCRED_Hook_Logging_In extends myCRED_Hook {
		/**
		 * Construct
		 */
		function __construct( $hook_prefs ) {
			parent::__construct( array(
				'id'       => 'logging_in',
				'defaults' => array(
					'creds'   => 1,
					'log'     => '%plural% for logging in',
					'limit'   => 'daily'
				)
			), $hook_prefs );
		}

		/**
		 * Run
		 * @since 0.1
		 * @version 1.1
		 */
		public function run() {
			if ( $this->prefs['creds'] != 0 )
				add_action( 'wp_login', array( $this, 'logging_in' ), 10, 2 );
		}

		/**
		 * Login Hook
		 * @since 0.1
		 * @version 1.2
		 */
		public function logging_in( $user_login, $user = '' ) {
			// In case the user object is not past along
			if ( !is_object( $user ) ) {
				$user = get_user_by( 'login', $user_login );
				if ( !is_object( $user ) ) return;
			}

			// Check for exclusion
			if ( $this->core->exclude_user( $user->ID ) === true ) return;

			// Check if we should reward
			if ( !$this->reward_login( $user->ID ) ) return;

			// Execute
			$this->core->add_creds(
				'logging_in',
				$user->ID,
				$this->prefs['creds'],
				$this->prefs['log']
			);
		}

		/**
		 * Reward Login Check
		 * Checks to see if the given user id should be rewarded for logging in.
		 * @returns true or false
		 * @since 1.0.6
		 * @version 1.1
		 */
		protected function reward_login( $user_id ) {
			$now = date_i18n( 'U' );
			$today = date_i18n( 'Y-m-d' );
			$past = get_user_meta( $user_id, 'mycred_last_login', true );

			// Even if there is no limit set we will always impose a 1 min limit
			// to prevent users from just logging in and out for points.
			if ( $past >= $now-apply_filters( 'mycred_hook_login_min_limit', 60 ) ) return false;

			// If limit is set
			if ( !empty( $this->prefs['limit'] ) ) {
				// If logged in before
				if ( !empty( $past ) ) {
					if ( $this->prefs['limit'] == 'twentyfour' ) {
						$mark = 86400;
						$next = $past+$mark;
						// Check if next time we can get points is in future; if thats the case, bail
						if ( $next > $now ) return false;
					}
					elseif ( $this->prefs['limit'] == 'twelve' ) {
						$mark = 43200;
						$next = $past+$mark;
						// Check if next time we can get points is in future; if thats the case, bail
						if ( $next > $now ) return false;
					}
					elseif ( $this->prefs['limit'] == 'sevendays' ) {
						$mark = 604800;
						$next = $past+$mark;
						// Check if next time we can get points is in future; if thats the case, bail
						if ( $next > $now ) return false;
					}
					elseif ( $this->prefs['limit'] == 'daily' ) {
						if ( $today == $past ) return false;
					}
				}
			}

			// Update new login time
			if ( $this->prefs['limit'] == 'daily' )
				update_user_meta( $user_id, 'mycred_last_login', $today );
			else
				update_user_meta( $user_id, 'mycred_last_login', $now );

			return true;
		}

		/**
		 * Preference for Login Hook
		 * @since 0.1
		 * @version 1.0.1
		 */
		public function preferences() {
			$prefs = $this->prefs; ?>

					<label class="subheader"><?php echo $this->core->plural(); ?></label>
					<ol>
						<li>
							<div class="h2"><input type="text" name="<?php echo $this->field_name( 'creds' ); ?>" id="<?php echo $this->field_id( 'creds' ); ?>" value="<?php echo $this->core->number( $prefs['creds'] ); ?>" size="8" /></div>
						</li>
					</ol>
					<label class="subheader"><?php _e( 'Log Template', 'mycred' ); ?></label>
					<ol>
						<li>
							<div class="h2"><input type="text" name="<?php echo $this->field_name( 'log' ); ?>" id="<?php echo $this->field_id( 'log' ); ?>" value="<?php echo $prefs['log']; ?>" class="long" /></div>
							<span class="description"><?php _e( 'Available template tags: General', 'mycred' ); ?></span>
						</li>
					</ol>
					<label class="subheader"><?php _e( 'Limit', 'mycred' ); ?></label>
					<ol>
						<li>
							<?php $this->impose_limits_dropdown( 'limit' ); ?>

						</li>
					</ol>
<?php		unset( $this );
		}
	}
}

/**
 * Hook for publishing content
 * @since 0.1
 * @version 1.0.1
 */
if ( !class_exists( 'myCRED_Hook_Publishing_Content' ) ) {
	class myCRED_Hook_Publishing_Content extends myCRED_Hook {
		/**
		 * Construct
		 */
		function __construct( $hook_prefs ) {
			$defaults = array(
				'post'    => array(
					'creds'  => 1,
					'log'    => '%plural% for new Post'
				),
				'page'    => array(
					'creds'  => 1,
					'log'    => '%plural% for new Page'
				)
			);

			$post_type_args = array(
				'public'   => true,
				'_builtin' => false
			);
			$post_types = get_post_types( $post_type_args, 'objects', 'and' ); 
			foreach ( $post_types as $post_type ) {
				$defaults[ $post_type->name ] = array(
					'creds' => 0,
					'log'   => ''
				);
			}

			parent::__construct( array(
				'id'       => 'publishing_content',
				'defaults' => $defaults
			), $hook_prefs );
		}

		/**
		 * Run
		 * @since 0.1
		 * @version 1.0
		 */
		public function run() {
			add_action( 'transition_post_status', array( $this, 'publishing_content' ), 10, 3 );
		}

		/**
		 * Publish Content Hook
		 * @since 0.1
		 * @version 1.0
		 */
		public function publishing_content( $new_status, $old_status, $post ) {
			$user_id = $post->post_author;
			if ( $this->core->exclude_user( $user_id ) === true ) return;

			$post_id = $post->ID;
			$post_type = $post->post_type;
			if ( !isset( $this->prefs[$post_type]['creds'] ) ) return;
			if ( empty( $this->prefs[$post_type]['creds'] ) || $this->prefs[$post_type]['creds'] == 0 ) return;

			// We want to fire when content get published or when it gets privatly published
			$status = apply_filters( 'mycred_publish_hook_old', array( 'new', 'auto-draft', 'draft', 'private', 'pending' ) );
			$publish_status = apply_filters( 'mycred_publish_hook_new', array( 'publish', 'private' ) );
			if ( in_array( $old_status, $status ) && in_array( $new_status, $publish_status ) && array_key_exists( $post_type, $this->prefs ) ) {

				// Make sure this is unique
				if ( $this->core->has_entry( 'publishing_content', $post_id, $user_id ) ) return;

				// Prep
				$entry = $this->prefs[$post_type]['log'];
				$data = array( 'ref_type' => 'post' );

				// Add Creds
				$this->core->add_creds(
					'publishing_content',
					$user_id,
					$this->prefs[$post_type]['creds'],
					$entry,
					$post_id,
					$data
				);
			}
		}

		/**
		 * Preference for Publish Content Hook
		 * @since 0.1
		 * @version 1.0.1
		 */
		public function preferences() {
			$prefs = $this->prefs; ?>

					<label class="subheader"><?php echo $this->core->template_tags_general( __( '%plural% for Posts', 'mycred' ) ); ?></label>
					<ol>
						<li>
							<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'post' => 'creds' ) ); ?>" id="<?php echo $this->field_id( array( 'post' => 'creds' ) ); ?>" value="<?php echo $this->core->number( $prefs['post']['creds'] ); ?>" size="8" /></div>
						</li>
					</ol>
					<label class="subheader"><?php _e( 'Log template', 'mycred' ); ?></label>
					<ol>
						<li>
							<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'post' => 'log' ) ); ?>" id="<?php echo $this->field_id( array( 'post' => 'log' ) ); ?>" value="<?php echo $prefs['post']['log']; ?>" class="long" /></div>
							<span class="description"><?php _e( 'Available template tags: General, Post', 'mycred' ); ?></span>
						</li>
					</ol>
					<label class="subheader"><?php echo $this->core->template_tags_general( __( '%plural% for Pages', 'mycred' ) ); ?></label>
					<ol>
						<li>
							<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'page' => 'creds' ) ); ?>" id="<?php echo $this->field_id( array( 'page' => 'creds' ) ); ?>" value="<?php echo $this->core->number( $prefs['page']['creds'] ); ?>" size="8" /></div>
						</li>
					</ol>
					<label class="subheader"><?php _e( 'Log template', 'mycred' ); ?></label>
					<ol>
						<li>
							<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'page' => 'log' ) ); ?>" id="<?php echo $this->field_id( array( 'page' => 'log' ) ); ?>" value="<?php echo $prefs['page']['log']; ?>" class="long" /></div>
							<span class="description"><?php _e( 'Available template tags: General, Post', 'mycred' ); ?></span>
						</li>
					</ol>
<?php		// Get all not built-in post types (excludes posts, pages, media)
			$post_type_args = array(
				'public'   => true,
				'_builtin' => false
			);
			$post_types = get_post_types( $post_type_args, 'objects', 'and' ); 
			foreach ( $post_types as $post_type ) {
				// Start by checking if this post type should be excluded
				if ( !$this->include_post_type( $post_type->name ) ) continue;

				// Points to award/deduct
				if ( isset( $prefs[$post_type->name]['creds'] ) )
					$_creds = $prefs[$post_type->name]['creds'];
				else
					$_creds = 0;

				// Log template
				if ( isset( $prefs[$post_type->name]['log'] ) )
					$_log = $prefs[$post_type->name]['log'];
				else
					$_log = ''; ?>

					<label class="subheader"><?php echo sprintf( $this->core->template_tags_general( __( '%plural% for %s', 'mycred' ) ),  $post_type->labels->name ); ?></label>
					<ol>
						<li>
							<div class="h2"><input type="text" name="<?php echo $this->field_name( array( $post_type->name => 'creds' ) ); ?>" id="<?php echo $this->field_id( array( $post_type->name => 'creds' ) ); ?>" value="<?php echo $this->core->number( $_creds ); ?>" size="8" /></div>
						</li>
					</ol>
					<label class="subheader"><?php _e( 'Log template', 'mycred' ); ?></label>
					<ol>
						<li>
							<div class="h2"><input type="text" name="<?php echo $this->field_name( array( $post_type->name => 'log' ) ); ?>" id="<?php echo $this->field_id( array( $post_type->name => 'log' ) ); ?>" value="<?php echo $_log; ?>" class="long" /></div>
							<span class="description"><?php _e( 'Available template tags: General, Post', 'mycred' ); ?></span>
						</li>
					</ol>
<?php		}
			unset( $this );
		}

		/**
		 * Include Post Type
		 * Checks if a given post type should be excluded
		 * @since 0.1
		 * @version 1.1
		 */
		protected function include_post_type( $post_type ) {
			// Exclude Core
			$excludes = array( 'post', 'page' );
			if ( in_array( $post_type, apply_filters( 'mycred_post_type_excludes', $excludes ) ) ) return false;
			return true;
		}
	}
}

/**
 * Hook for comments
 * @since 0.1
 * @version 1.2
 */
if ( !class_exists( 'myCRED_Hook_Comments' ) ) {
	class myCRED_Hook_Comments extends myCRED_Hook {
		/**
		 * Construct
		 */
		function __construct( $hook_prefs ) {
			parent::__construct( array(
				'id'       => 'comments',
				'defaults' => array(
					'limits'   => array(
						'self_reply' => 0,
						'per_post'   => 10,
						'per_day'    => 0
					),
					'approved' => array(
						'creds'   => 1,
						'log'     => '%plural% for Approved Comment',
						'author'  => 0
					),
					'spam'     => array(
						'creds'   => '-5',
						'log'     => '%plural% deduction for Comment marked as SPAM',
						'author'  => 0
					),
					'trash'    => array(
						'creds'   => '-1',
						'log'     => '%plural% deduction for deleted / unapproved Comment',
						'author'  => 0
					)
				)
			), $hook_prefs );
		}

		/**
		 * Run
		 * @since 0.1
		 * @version 1.1
		 */
		public function run() {
			add_action( 'comment_post',              array( $this, 'new_comment' ), 10, 2         );
			add_action( 'transition_comment_status', array( $this, 'comment_transitions' ), 10, 3 );
		}

		/**
		 * New Comment
		 * If comments are approved without moderation, we apply the corresponding method
		 * or else we will wait till the appropriate instance.
		 * @since 0.1
		 * @version 1.2.1
		 */
		public function new_comment( $comment_id, $comment_status ) {
			// Marked SPAM
			if ( $comment_status === 'spam' )
				$this->comment_transitions( 'spam', 'unapproved', $comment_id );
			// Approved comment
			elseif ( $comment_status == '1' )
				$this->comment_transitions( 'approved', 'unapproved', $comment_id );
		}

		/**
		 * Comment Transitions
		 * @since 1.1.2
		 * @version 1.3.1
		 */
		public function comment_transitions( $new_status, $old_status, $comment ) {
			// Passing an integer instead of an object means we need to grab the comment object ourselves
			if ( ! is_object( $comment ) )
				$comment = get_comment( $comment );
			
			// No comment object so lets bail
			if ( $comment === NULL ) return;

			// Ignore Pingbacks or Trackbacks
			if ( ! empty( $comment->comment_type ) ) return;

			// Logged out users miss out
			if ( $comment->user_id == 0 ) return;

			// Get comment author
			$comment_author = $comment->user_id;
			
			// Get content author
			$content_author = NULL;
			if ( isset( $comment->comment_post_ID ) || ! empty( $comment->comment_post_ID ) ) {
				$post = get_post( (int) $comment->comment_post_ID );
				$content_author = $post->post_author;
			}
			
			$comment_author_points = $this->core->zero();
			$content_author_points = $this->core->zero();
			
			$reference = '';
			$log = '';
			
			// Approved Comments
			if ( $new_status == 'approved' ) {
				$reference = 'approved_comment';
				$log = $this->prefs['approved']['log'];

				// From unapproved / hold
				if ( in_array( $old_status, array( 'unapproved', 'hold' ) ) ) {
					// Comment author
					if ( ! $this->user_exceeds_limit( $comment_author, $comment->comment_post_ID ) )
						$comment_author_points = $this->prefs['approved']['creds'];
					
					// Content author
					$content_author_points = $this->prefs['approved']['author'];
				}
				// From being marked as spam
				elseif ( $old_status == 'spam' ) {
					$comment_author_points = abs( $this->prefs['spam']['creds'] );
					$content_author_points = abs( $this->prefs['spam']['author'] );
				}
				// From being in trash
				elseif ( $old_status == 'trash' ) {
					$comment_author_points = abs( $this->prefs['trash']['creds'] );
					$content_author_points = abs( $this->prefs['trash']['author'] );
				}
			}
			
			// Unapproved Comments
			elseif ( $new_status == 'unapproved' && $old_status == 'approved' ) {
				$reference = 'unapproved_comment';
				$log = $this->prefs['trash']['log'];

				// If we deducted points for approved comments we want to add them back
				if ( $this->prefs['approved']['creds'] < $this->core->zero() ) {
					$comment_author_points = abs( $this->prefs['approved']['creds'] );
					$content_author_points = abs( $this->prefs['approved']['author'] );
				}
				// Else use what we have set
				else {
					$comment_author_points = $this->prefs['approved']['creds'];
					$content_author_points = $this->prefs['approved']['author'];
				}
			}
			
			// Marked as SPAM
			elseif ( $new_status == 'spam' ) {
				$reference = 'spam_comment';
				$log = $this->prefs['spam']['log'];

				$comment_author_points = $this->prefs['spam']['creds'];
				$content_author_points = $this->prefs['spam']['author'];
			}
			
			// Trashed Comments
			elseif ( $new_status == 'trash' ) {
				$reference = 'deleted_comment';
				$log = $this->prefs['trash']['log'];

				$comment_author_points = $this->prefs['trash']['creds'];
				$content_author_points = $this->prefs['trash']['author'];
			}
			
			// Comment Author
			if ( ! $this->core->exclude_user( $comment_author ) && $comment_author_points != $this->core->zero() ) {

				// Check if we are allowed to comment our own comment and are doing it
				if ( $this->prefs['limits']['self_reply'] != 0 && $comment->comment_parent != 0 ) {
					$parent = get_comment( $comment->comment_parent );
					// Comment author is not replying to their own comments
					if ( $parent->user_id != $comment_author ) {
						$this->core->add_creds(
							$reference,
							$comment_author,
							$comment_author_points,
							$log,
							$comment->comment_ID,
							array( 'ref_type' => 'comment' )
						);
					}
				}
				// Else
				else {
					$this->core->add_creds(
						$reference,
						$comment_author,
						$comment_author_points,
						$log,
						$comment->comment_ID,
						array( 'ref_type' => 'comment' )
					);
				}

			}

			if ( $content_author === NULL ) return;

			// Content Author
			if ( ! $this->core->exclude_user( $content_author ) && $content_author_points != $this->core->zero() ) {
				$this->core->add_creds(
					$reference,
					$content_author,
					$content_author_points,
					$log,
					$comment->comment_ID,
					array( 'ref_type' => 'comment' )
				);
			}
		}

		/**
		 * Check if user exceeds limit
		 * @since 1.1.1
		 * @version 1.0
		 */
		public function user_exceeds_limit( $user_id = NULL, $post_id = NULL ) {
			if ( !isset( $this->prefs['limits'] ) ) return false;

			// Prep
			$today = date_i18n( 'Y-m-d' );

			// First we check post limit
			if ( $this->prefs['limits']['per_post'] > 0 ) {
				$post_limit = 0;
				// Grab limit
				$limit = get_user_meta( $user_id, 'mycred_comment_limit_post', true );
				// Apply default if none exist
				if ( empty( $limit ) ) $limit = array( $post_id => $post_limit );

				// Check if post_id is in limit array
				if ( array_key_exists( $post_id, $limit ) ) {
					$post_limit = $limit[$post_id];

					// Limit is reached
					if ( $post_limit >= $this->prefs['limits']['per_post'] ) return true;
				}

				// Add / Replace post_id counter with an incremented value
				$limit[$post_id] = $post_limit+1;
				// Save
				update_user_meta( $user_id, 'mycred_comment_limit_post', $limit );
			}

			// Second we check daily limit
			if ( $this->prefs['limits']['per_day'] > 0 ) {
				$daily_limit = 0;
				// Grab limit
				$limit = get_user_meta( $user_id, 'mycred_comment_limit_day', true );
				// Apply default if none exist
				if ( empty( $limit ) ) $limit = array();

				// Check if todays date is in limit
				if ( array_key_exists( $today, $limit ) ) {
					$daily_limit = $limit[$today];

					// Limit is reached
					if ( $daily_limit >= $this->prefs['limits']['per_day'] ) return true;
				}
				// Today is not in limit array so we reset to remove other dates
				else {
					$limit = array();
				}

				// Add / Replace todays counter with an imcremented value
				$limit[$today] = $daily_limit+1;
				// Save
				update_user_meta( $user_id, 'mycred_comment_limit_day', $limit );
			}

			return false;
		}

		/**
		 * Preferences for Commenting Hook
		 * @since 0.1
		 * @version 1.0.1
		 */
		public function preferences() {
			$prefs = $this->prefs;

			if ( !isset( $prefs['limits'] ) )
				$prefs['limits'] = array(
					'self_reply' => 0,
					'per_post'   => 10,
					'per_day'    => 0
				); ?>

					<label class="subheader"><?php _e( 'Approved Comment', 'mycred' ); ?></label>
					<ol class="inline">
						<li>
							<label for="<?php echo $this->field_id( array( 'approved' => 'creds' ) ); ?>"><?php _e( 'Comment Author', 'mycred' ); ?></label>
							<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'approved' => 'creds' ) ); ?>" id="<?php echo $this->field_id( array( 'approved' => 'creds' ) ); ?>" value="<?php echo $this->core->number( $prefs['approved']['creds'] ); ?>" size="8" /></div>
						</li>
						<li>
							<label for="<?php echo $this->field_id( array( 'approved' => 'author' ) ); ?>"><?php _e( 'Content Author', 'mycred' ); ?></label>
							<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'approved' => 'author' ) ); ?>" id="<?php echo $this->field_id( array( 'approved' => 'author' ) ); ?>" value="<?php echo $this->core->number( $prefs['approved']['author'] ); ?>" size="8" /></div>
						</li>
						<li class="block empty">&nbsp;</li>
						<li class="block">
							<label for="<?php echo $this->field_id( array( 'approved' => 'log' ) ); ?>"><?php _e( 'Log template', 'mycred' ); ?></label>
							<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'approved' => 'log' ) ); ?>" id="<?php echo $this->field_id( array( 'approved' => 'log' ) ); ?>" value="<?php echo $prefs['approved']['log']; ?>" class="long" /></div>
							<span class="description"><?php _e( 'Available template tags: General, Comment', 'mycred' ); ?></span>
						</li>
					</ol>
					<label class="subheader"><?php _e( 'Comment Marked SPAM', 'mycred' ); ?></label>
					<ol class="inline">
						<li>
							<label for="<?php echo $this->field_id( array( 'spam' => 'creds' ) ); ?>"><?php _e( 'Comment Author', 'mycred' ); ?></label>
							<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'spam' => 'creds' ) ); ?>" id="<?php echo $this->field_id( array( 'spam' => 'creds' ) ); ?>" value="<?php echo $this->core->number( $prefs['spam']['creds'] ); ?>" size="8" /></div>
						</li>
						<li>
							<label for="<?php echo $this->field_id( array( 'spam' => 'creds' ) ); ?>"><?php _e( 'Content Author', 'mycred' ); ?></label>
							<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'spam' => 'author' ) ); ?>" id="<?php echo $this->field_id( array( 'spam' => 'author' ) ); ?>" value="<?php echo $this->core->number( $prefs['spam']['author'] ); ?>" size="8" /></div>
						</li>
						<li class="block empty">&nbsp;</li>
						<li class="block">
							<label for="<?php echo $this->field_id( array( 'spam' => 'log' ) ); ?>"><?php _e( 'Log template', 'mycred' ); ?></label>
							<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'spam' => 'log' ) ); ?>" id="<?php echo $this->field_id( array( 'spam' => 'log' ) ); ?>" value="<?php echo $prefs['spam']['log']; ?>" class="long" /></div>
							<span class="description"><?php _e( 'Available template tags: General, Comment', 'mycred' ); ?></span>
						</li>
					</ol>
					<label class="subheader"><?php _e( 'Trashed / Unapproved Comments', 'mycred' ); ?></label>
					<ol class="inline">
						<li>
							<label for="<?php echo $this->field_id( array( 'trash' => 'creds' ) ); ?>"><?php _e( 'Comment Author', 'mycred' ); ?></label>
							<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'trash' => 'creds' ) ); ?>" id="<?php echo $this->field_id( array( 'trash' => 'creds' ) ); ?>" value="<?php echo $this->core->number( $prefs['trash']['creds'] ); ?>" size="8" /></div>
						</li>
						<li>
							<label for="<?php echo $this->field_id( array( 'trash' => 'author' ) ); ?>"><?php _e( 'Content Author', 'mycred' ); ?></label>
							<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'trash' => 'author' ) ); ?>" id="<?php echo $this->field_id( array( 'trash' => 'author' ) ); ?>" value="<?php echo $this->core->number( $prefs['trash']['author'] ); ?>" size="8" /></div>
						</li>
						<li class="block empty">&nbsp;</li>
						<li class="block">
							<label for="<?php echo $this->field_id( array( 'trash' => 'log' ) ); ?>"><?php _e( 'Log template', 'mycred' ); ?></label>
							<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'trash' => 'log' ) ); ?>" id="<?php echo $this->field_id( array( 'trash' => 'log' ) ); ?>" value="<?php echo $prefs['trash']['log']; ?>" class="long" /></div>
							<span class="description"><?php _e( 'Available template tags: General, Comment', 'mycred' ); ?></span>
						</li>
					</ol>
					<label class="subheader"><?php _e( 'Limits', 'mycred' ); ?></label>
					<ol>
						<li>
							<label for="<?php echo $this->field_id( array( 'limits' => 'per_post' ) ); ?>"><?php _e( 'Limit per post', 'mycred' ); ?></label>
							<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'limits' => 'per_post' ) ); ?>" id="<?php echo $this->field_id( array( 'limits' => 'per_post' ) ); ?>" value="<?php echo $prefs['limits']['per_post']; ?>" size="8" /></div>
							<span class="description"><?php echo $this->core->template_tags_general( __( 'The number of comments per post that grants %_plural% to the comment author. Use zero for unlimited.', 'mycred' ) ); ?></span>
						</li>
						<li class="empty">&nbsp;</li>
						<li>
							<label for="<?php echo $this->field_id( array( 'limits' => 'per_day' ) ); ?>"><?php _e( 'Limit per day', 'mycred' ); ?></label>
							<div class="h2"><input type="text" name="<?php echo $this->field_name( array( 'limits' => 'per_day' ) ); ?>" id="<?php echo $this->field_id( array( 'limits' => 'per_day' ) ); ?>" value="<?php echo $prefs['limits']['per_day']; ?>" size="8" /></div>
							<span class="description"><?php echo $this->core->template_tags_general( __( 'Number of comments per day that grants %_plural%. Use zero for unlimited.', 'mycred' ) ); ?></span>
						</li>
						<li class="empty">&nbsp;</li>
						<li>
							<input type="checkbox" name="<?php echo $this->field_name( array( 'limits' => 'self_reply' ) ); ?>" id="<?php echo $this->field_id( array( 'limits' => 'self_reply' ) ); ?>" <?php checked( $prefs['limits']['self_reply'], 1 ); ?> value="1" />
							<label for="<?php echo $this->field_id( array( 'limits' => 'self_reply' ) ); ?>"><?php echo $this->core->template_tags_general( __( '%plural% is to be awarded even when comment authors reply to their own comment.', 'mycred' ) ); ?></label>
						</li>
					</ol>
<?php		unset( $this );
		}
		
		/**
		 * Sanitise Preference
		 * @since 1.1.1
		 * @version 1.0
		 */
		function sanitise_preferences( $data ) {
			$new_data = $data;

			$new_data['limits']['per_post'] = ( !empty( $data['limits']['per_post'] ) ) ? abs( $data['limits']['per_post'] ) : 0;
			$new_data['limits']['per_day'] = ( !empty( $data['limits']['per_day'] ) ) ? abs( $data['limits']['per_day'] ) : 0;
			$new_data['limits']['self_reply'] = ( isset( $data['limits']['self_reply'] ) ) ? $data['limits']['self_reply'] : 0;

			return $new_data;
		}
	}
}

/**
 * Hooks for Clicking on Links
 * @since 1.1
 * @version 1.0
 */
if ( !class_exists( 'myCRED_Hook_Click_Links' ) ) {
	class myCRED_Hook_Click_Links extends myCRED_Hook {
		/**
		 * Construct
		 */
		function __construct( $hook_prefs ) {
			parent::__construct( array(
				'id'       => 'link_click',
				'defaults' => array(
					'limit_by' => 'none',
					'creds'    => 1,
					'log'      => '%plural% for clicking on link to: %url%'
				)
			), $hook_prefs );
		}

		/**
		 * Run
		 * @since 1.1
		 * @version 1.0
		 */
		public function run() {
			add_action( 'mycred_front_enqueue',        array( $this, 'register_script' )       );
			add_action( 'wp_footer',                   array( $this, 'footer' )                );

			add_shortcode( 'mycred_link',              'mycred_render_shortcode_link'          );
			add_action( 'wp_ajax_mycred-click-points', array( $this, 'ajax_call_link_points' ) );

			add_filter( 'mycred_parse_tags_link',      array( $this, 'parse_custom_tags' ), 10, 2 );
		}

		/**
		 * Customize Limit Options
		 * @since 1.1
		 * @version 1.0
		 */
		public function custom_limit() {
			return array(
				'none' => __( 'No limit', 'mycred' ),
				'url'  => __( 'Once for each unique URL', 'mycred' ),
				'id'   => __( 'Once for each unique link id', 'mycred' )
			);
		}

		/**
		 * Parse Custom Tags in Log
		 * @since 1.1
		 * @version 1.1.1
		 */
		public function parse_custom_tags( $content, $log_entry ) {
			$data = maybe_unserialize( $log_entry->data );
			$content = str_replace( '%url%', $data['link_url'], $content );
			$content = str_replace( '%id%',  $data['link_id'], $content );
			if ( isset( $data['link_title'] ) )
				$content = str_replace( '%title%',  $data['link_title'], $content );

			return $content;
		}

		/**
		 * Register Script
		 * @since 1.1
		 * @version 1.0
		 */
		public function register_script() {
			wp_register_script(
				'mycred-link-points',
				plugins_url( 'assets/js/links.js', myCRED_THIS ),
				array( 'jquery' ),
				myCRED_VERSION . '.1',
				true
			);

			global $mycred_link_points;
			if ( $mycred_link_points === true ) {
				wp_enqueue_script( 'mycred-link-points' );
			}
		}

		/**
		 * WP Fotter
		 * @since 1.1
		 * @version 1.0
		 */
		public function footer() {
			global $mycred_link_points;
			if ( $mycred_link_points === true ) {
				wp_localize_script(
					'mycred-link-points',
					'myCREDgive',
					array(
						'ajaxurl' => admin_url( 'admin-ajax.php' ),
						'token'   => wp_create_nonce( 'mycred-link-points' )
					)
				);
				wp_enqueue_script( 'mycred-link-points' );
			}
		}

		/**
		 * Custom Has Entry Check
		 * @since 1.1
		 * @version 1.1.1
		 */
		public function has_entry( $action = '', $reference = '', $user_id = '', $data = '' ) {
			global $wpdb;

			if ( $this->prefs['limit_by'] == 'url' ) {
				$reference = urldecode( $reference );
				$string = '%s:8:"link_url";s:' . strlen( $reference ) . ':"' . $reference . '";%';
			}
			elseif ( $this->prefs['limit_by'] == 'id' ) {
				$string = '%s:7:"link_id";s:' . strlen( $reference ) . ':"' . $reference . '";%';
			}
			else return false;

			$sql = "SELECT id FROM {$this->core->log_table} WHERE ref = %s AND user_id = %d AND data LIKE %s;";
			$wpdb->get_results( $wpdb->prepare( $sql, $action, $user_id, $string ) );
			if ( $wpdb->num_rows > 0 ) return true;

			return false;
		}

		/**
		 * AJAX Call Handler
		 * @since 1.1
		 * @version 1.3.1
		 */
		public function ajax_call_link_points() {
			// We must be logged in
			if ( !is_user_logged_in() ) die( json_encode( 100 ) );

			// Security
			check_ajax_referer( 'mycred-link-points', 'token' );

			// Current User
			$user_id = get_current_user_id();

			// Check if user should be excluded
			if ( $this->core->exclude_user( $user_id ) ) die( json_encode( 200 ) );

			// Key
			if ( ! isset( $_POST['key'] ) ) die( json_encode( 300 ) );
			require_once( myCRED_INCLUDES_DIR . 'mycred-protect.php' );
			$protect = new myCRED_Protect();
			$key = explode( ':', $protect->do_decode( $_POST['key'] ) );
			if ( count( $key ) != 2 ) die( json_encode( $key ) );
			
			$amount = trim( $key[0] );
			$id = trim( $key[1] );

			// Amount
			if ( $amount == 0 )
				$amount = $this->prefs['creds'];
			else
				$amount = $this->core->number( $amount );
			
			if ( $amount == 0 || $amount == $this->core->zero() ) die( json_encode( 400 ) );

			// Limits
			if ( $this->prefs['limit_by'] == 'url' ) {
				if ( !isset( $_POST['url'] ) || empty( $_POST['url'] ) ) die( json_encode( 500 ) );
				if ( $this->has_entry( 'link_click', $_POST['url'], $user_id ) ) die( json_encode( 600 ) );
				$ref = $_POST['url'];
			}
			elseif ( $this->prefs['limit_by'] == 'id' ) {
				if ( $this->has_entry( 'link_click', $id, $user_id ) ) die( json_encode( 700 ) );
				$ref = $id;
			}
			else {
				$ref = $id;
			}

			// Execute
			$this->core->add_creds(
				'link_click',
				$user_id,
				$amount,
				$this->prefs['log'],
				'',
				array(
					'ref_type'   => 'link',
					'link_url'   => $_POST['url'],
					'link_id'    => $id,
					'link_title' => ( isset( $_POST['etitle'] ) ) ? $_POST['etitle'] : ''
				)
			);

			// Report the good news
			die( json_encode( 'done' ) );
		}

		/**
		 * Preference for Link Click Hook
		 * @since 1.1
		 * @version 1.0.2
		 */
		public function preferences() {
			$prefs = $this->prefs; ?>

					<label class="subheader"><?php echo $this->core->plural(); ?></label>
					<ol>
						<li>
							<div class="h2"><input type="text" name="<?php echo $this->field_name( 'creds' ); ?>" id="<?php echo $this->field_id( 'creds' ); ?>" value="<?php echo $this->core->number( $prefs['creds'] ); ?>" size="8" /></div>
							<span class="description"><?php _e( 'The default amount to award for clicking on links. You can override this in the shortcode.', 'mycred' ); ?></span>
						</li>
					</ol>
					<label class="subheader"><?php _e( 'Log Template', 'mycred' ); ?></label>
					<ol>
						<li>
							<div class="h2"><input type="text" name="<?php echo $this->field_name( 'log' ); ?>" id="<?php echo $this->field_id( 'log' ); ?>" value="<?php echo $prefs['log']; ?>" class="long" /></div>
							<span class="description"><?php _e( 'Available template tags: General and custom tags: %url%, %title% or %id%.', 'mycred' ); ?></span>
						</li>
					</ol>
					<label class="subheader"><?php _e( 'Limits', 'mycred' ); ?></label>
					<ol>
						<li>
							<?php 
			add_filter( 'mycred_hook_impose_limits', array( $this, 'custom_limit' ) );				
			$this->impose_limits_dropdown( 'limit_by', false ); ?>

						</li>
						<li><strong><?php _e( 'Note!', 'mycred' ); ?></strong> <?php echo $this->core->template_tags_general( __( 'If no ID is set when using the mycred_link shortcode, the shortcode will generate one automatically based on the value set under href. If you are using this feature for "sharing" content, it is recommended that you limit by ID.', 'mycred' ) ); ?></li>
					</ol>
<?php		unset( $this );
		}
	}
}

/**
 * Hooks for Viewing Videos
 * @since 1.2
 * @version 1.0
 */
if ( !class_exists( 'myCRED_Hook_Video_Views' ) ) {
	class myCRED_Hook_Video_Views extends myCRED_Hook {
		/**
		 * Construct
		 */
		function __construct( $hook_prefs ) {
			parent::__construct( array(
				'id'       => 'video_view',
				'defaults' => array(
					'creds'    => 1,
					'log'      => '%plural% for viewing video',
					'logic'    => 'play',
					'interval' => '',
					'leniency' => 10
				)
			), $hook_prefs );
		}

		/**
		 * Run
		 * @since 1.2
		 * @version 1.0
		 */
		public function run() {
			add_action( 'mycred_front_enqueue',        array( $this, 'register_script' )        );
			add_shortcode( 'mycred_video',             'mycred_render_shortcode_video'          );
			add_action( 'wp_ajax_mycred-video-points', array( $this, 'ajax_call_video_points' ) );
		}

		/**
		 * Register Script
		 * @since 1.2
		 * @version 1.0
		 */
		public function register_script() {
			wp_register_script(
				'mycred-video-points',
				plugins_url( 'assets/js/video.js', myCRED_THIS ),
				array( 'jquery', 'swfobject' ),
				myCRED_VERSION . '.1',
				true
			);
			wp_localize_script(
				'mycred-video-points',
				'myCREDvideo',
				array(
					'ajaxurl'  => admin_url( 'admin-ajax.php' ),
					'token'    => wp_create_nonce( 'mycred-video-points' ),
					'interval' => abs( $this->prefs['interval']*1000 ),
					'logic'    => $this->prefs['logic'],
					'amount'   => $this->prefs['creds'],
					'user_id'  => get_current_user_id()
				)
			);
			wp_enqueue_script( 'mycred-video-points' );
		}

		/**
		 * AJAX Call Handler
		 * @since 1.2
		 * @version 1.1
		 */
		public function ajax_call_video_points() {
			// We must be logged in
			if ( !is_user_logged_in() ) die();

			// Security
			check_ajax_referer( 'mycred-video-points', 'token' );

			$award = false;
			$status = 'silence';

			// Check for amount override
			if ( isset( $_POST['amount'] ) && $_POST['amount'] != $this->prefs['creds'] )
				$amount = $this->core->number( $_POST['amount'] );
			else
				$amount = $this->prefs['creds'];

			// Check for logic override
			if ( isset( $_POST['logic'] ) || $_POST['logic'] != $this->prefs['logic'] )
				$logic = $_POST['logic'];
			else
				$logic = $this->prefs['logic'];

			// Check for interval override
			if ( isset( $_POST['interval'] ) && !empty( $_POST['interval'] ) )
				$interval = abs( $_POST['interval']/1000 );
			else
				$interval = abs( $this->prefs['interval'] );

			$video_id = trim( $_POST['video_id'] );
			$state = trim( $_POST['video_state'] );
			$duration = abs( $_POST['video_length'] );

			$user_id = abs( $_POST['user_id'] );
			$watched = abs( $_POST['user_watched'] );
			$actions = trim( $_POST['user_actions'] );

			// Apply Leniency
			$leniency = $duration*($this->prefs['leniency']/100);
			$leniency = floor( $leniency );
			$watched = $watched + $leniency;

			// Award points as soon as video starts
			if ( $logic == 'play' ) {
				if ( $state == 1 && !$this->has_entry( 'watching_video', '', $user_id, $video_id ) ) {
					$award = true;

					// Execute
					$this->core->add_creds(
						'watching_video',
						$user_id,
						$amount,
						$this->prefs['log'],
						'',
						$video_id
					);

					$status = 'max';
				}
			}
			// Awards points when video finished
			elseif ( $logic == 'full' ) {
				// Check for skipping or if we watched more (with leniency) then the video length
				if ( !preg_match( '/22/', $actions, $matches ) || $watched >= $duration ) {
					if ( $state == 0 && !$this->has_entry( 'watching_video', '', $user_id, $video_id ) ) {
						$award = true;

						// Execute
						$this->core->add_creds(
							'watching_video',
							$user_id,
							$amount,
							$this->prefs['log'],
							'',
							$video_id
						);

						$status = 'max';
					}
				}
			}
			// Awards points in an interval
			elseif ( $logic == 'interval' ) {
				// The maximum points a video can earn you
				$num_intervals = floor( $duration / $interval );
				$max = abs( $num_intervals * $amount );
				$users_log = $this->get_users_video_log( $video_id, $user_id );
				// Film is playing and we just started
				if ( $state == 1 && $users_log === NULL ) {
					$award = true;
					// Execute
					$this->core->add_creds(
						'watching_video',
						$user_id,
						$amount,
						$this->prefs['log'],
						'',
						$video_id
					);
				}
				// Film is playing and we have not yet reached maximum on this movie
				elseif ( $state == 1 && isset( $users_log->creds ) && $users_log->creds+$amount <= $max ) {
					$award = true;
					$this->update_creds( $users_log->id, $user_id, $users_log->creds+$amount );
					$this->core->update_users_balance( $user_id, $amount );
					$amount = $users_log->creds+$amount;
				}
				// Film has ended and we have not reached maximum
				elseif ( $state == 0 && isset( $users_log->creds ) && $users_log->creds+$amount <= $max ) {
					$award = true;
					$this->update_creds( $users_log->id, $user_id, $users_log->creds+$amount );
					$this->core->update_users_balance( $user_id, $amount );
					$amount = $users_log->creds+$amount;
					$status = 'max';
				}
			}

			$data = array(
				'status'   => $status,
				'video_id' => $video_id,
				'amount'   => $amount
			);
			die( json_encode( $data ) );
		}

		/**
		 * Get Users Video Log
		 * Returns the log for a given video id.
		 * @since 1.2
		 * @version 1.0.1
		 */
		public function get_users_video_log( $video_id, $user_id ) {
			global $wpdb;

			$sql = "SELECT * FROM {$this->core->log_table} WHERE user_id = %d AND data = %s;";
			return $wpdb->get_row( $wpdb->prepare( $sql, $user_id, $video_id ) );
		}

		/**
		 * Update Points
		 * @since 1.2
		 * @version 1.1
		 */
		public function update_creds( $row_id, $user_id, $amount ) {
			// Prep format
			if ( !isset( $this->core->format['decimals'] ) )
				$decimals = $this->core->core['format']['decimals'];
			else
				$decimals = $this->core->format['decimals'];

			if ( $decimals > 0 )
				$format = '%f';
			else
				$format = '%d';

			$amount = $this->core->number( $amount );

			global $wpdb;
			$wpdb->update(
				$this->core->log_table,
				array( 'creds' => $amount ),
				array( 'ID'    => $row_id ),
				array( $format ),
				array( '%d' )
			);
		}

		/**
		 * Preference for Viewing Videos
		 * @since 1.2
		 * @version 1.0
		 */
		public function preferences() {
			$prefs = $this->prefs; ?>

					<label class="subheader"><?php echo $this->core->plural(); ?></label>
					<ol>
						<li>
							<div class="h2"><input type="text" name="<?php echo $this->field_name( 'creds' ); ?>" id="<?php echo $this->field_id( 'creds' ); ?>" value="<?php echo $this->core->number( $prefs['creds'] ); ?>" size="8" /></div>
							<span class="description"><?php _e( 'Amount to award for viewing videos.', 'mycred' ); ?></span>
						</li>
					</ol>
					<label class="subheader"><?php _e( 'Log Template', 'mycred' ); ?></label>
					<ol>
						<li>
							<div class="h2"><input type="text" name="<?php echo $this->field_name( 'log' ); ?>" id="<?php echo $this->field_id( 'log' ); ?>" value="<?php echo $prefs['log']; ?>" class="long" /></div>
							<span class="description"><?php _e( 'Available template tags: General', 'mycred' ); ?></span>
						</li>
					</ol>
					<label class="subheader"><?php _e( 'Award Logic', 'mycred' ); ?></label>
					<ol>
						<li><?php echo $this->core->template_tags_general( __( 'Select when %_plural% should be awarded or deducted.', 'mycred' ) ); ?></li>
						<li><input type="radio" name="<?php echo $this->field_name( 'logic' ); ?>" id="<?php echo $this->field_id( array( 'logic' => 'play' ) ); ?>"<?php checked( $prefs['logic'], 'play' ); ?> value="play" /> <label for="<?php echo $this->field_id( array( 'logic' => 'play' ) ); ?>"><?php _e( 'Play - As soon as video starts playing.', 'mycred' ); ?></label></li>
						<li><input type="radio" name="<?php echo $this->field_name( 'logic' ); ?>" id="<?php echo $this->field_id( array( 'logic' => 'full' ) ); ?>"<?php checked( $prefs['logic'], 'full' ); ?> value="full" /> <label for="<?php echo $this->field_id( array( 'logic' => 'full' ) ); ?>"><?php _e( 'Full - First when the entire video has played.', 'mycred' ); ?></label></li>
						<li><input type="radio" name="<?php echo $this->field_name( 'logic' ); ?>" id="<?php echo $this->field_id( array( 'logic' => 'interval' ) ); ?>"<?php checked( $prefs['logic'], 'interval' ); ?> value="interval" /> <label for="<?php echo $this->field_id( array( 'logic' => 'interval' ) ); ?>"><?php echo $this->core->template_tags_general( __( 'Interval - For each x number of seconds watched.', 'mycred' ) ); ?></label></li>
					</ol>
					<div id="video-interval"<?php if ( $prefs['logic'] == 'play' || $prefs['logic'] == 'full' ) echo ' style="display: none;"';?>>
						<label class="subheader"><?php _e( 'Interval', 'mycred' ); ?></label>
						<ol>
							<li><?php _e( 'Number of seconds', 'mycred' ); ?></li>
							<li>
								<div class="h2"><input type="text" name="<?php echo $this->field_name( 'interval' ); ?>" id="<?php echo $this->field_id( 'interval' ); ?>" value="<?php echo $prefs['interval']; ?>" size="8" /></div>
							</li>
						</ol>
					</div>
					<div id="video-leniency"<?php if ( $prefs['logic'] == 'play' ) echo ' style="display: none;"';?>>
						<label class="subheader"><?php _e( 'Leniency', 'mycred' ); ?></label>
						<ol>
							<li><?php _e( 'The maximum percentage a users view of a movie can differ from the actual length.', 'mycred' ); ?></li>
							<li>
								<div class="h2"><input type="text" name="<?php echo $this->field_name( 'leniency' ); ?>" id="<?php echo $this->field_id( 'leniency' ); ?>" value="<?php echo $prefs['leniency']; ?>" size="4" /> %</div>
								<span class="description"><?php echo _e( 'Do not set this value to zero! A lot of thing can happen while a user watches a movie and sometimes a few seconds can drop of the counter due to buffering or play back errors.', 'mycred' ); ?></span>
							</li>
						</ol>
					</div>
<script type="text/javascript">
jQuery(function($){
	$('input[name="<?php echo $this->field_name( 'logic' ); ?>"]').change(function(){
		if ( $(this).val() == 'interval' ) {
			$('#video-interval').show();
			$('#video-leniency').show();
		}
		else if ( $(this).val() == 'full' ) {
			$('#video-interval').hide();
			$('#video-leniency').show();
		}
		else {
			$('#video-interval').hide();
			$('#video-leniency').hide();
		}
	});
});
</script>
<?php		unset( $this );
		}
	}
}
?>